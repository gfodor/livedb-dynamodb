// Generated by CoffeeScript 1.6.3
(function() {
  var LiveDbDynamoDB, bson, castDocToOp, castDocToSnapshot, castOpToDoc, castSnapshotToDoc, decodeValue, encodeValue, exports, zlib;

  bson = require('bson');

  zlib = require('zlib');

  exports = module.exports = function(dynamodb, snapTableName, opTableName, options) {
    return new LiveDbDynamoDB(dynamodb, options);
  };

  LiveDbDynamoDB = (function() {
    function LiveDbDynamoDB(dynamodb, options) {
      this.dynamodb = dynamodb;
    }

    LiveDbDynamoDB.prototype.close = function(callback) {};

    LiveDbDynamoDB.prototype.getSnapshot = function(cName, docName, callback) {
      return this.dynamodb.getItem({
        TableName: cName,
        Key: {
          id: {
            S: docName
          }
        },
        ConsistentRead: true
      }, function(err, data) {
        if (data) {
          return castDocToSnapshot(data.Item, callback);
        } else {
          return callback(err, {});
        }
      });
    };

    LiveDbDynamoDB.prototype.bulkGetSnapshot = function(requests, callback) {
      var cName, docNames, requestItems;
      requestItems = {};
      for (cName in requests) {
        docNames = requests[cName];
        requestItems[cName] = _.map(docNames, function(n) {
          return {
            Keys: [
              {
                id: {
                  S: n
                }
              }
            ],
            ConsistentRead: true
          };
        });
      }
      return this.dynamodb.batchGetItem({
        RequestItems: requestItems
      }, function(err, data) {
        var results;
        if (err) {
          return callback(err);
        }
        results = {};
        return async.each(_.keys(data.Responses), (function(cName, nextMap) {
          return async.map(results[cName], castDocToSnapshot, function(err, snapshots) {
            results[cName] = snapshots;
            return nextMap(err);
          });
        }), (function(err) {
          return callback(err, results);
        }));
      });
    };

    LiveDbDynamoDB.prototype.writeSnapshot = function(cName, docName, data, callback) {
      var _this = this;
      if (this.closed) {
        return callback("DynamoDB closed");
      }
      return castSnapshotToDoc(docName, data, function(err, doc) {
        if (err) {
          return callback(err);
        }
        return _this.dynamodb.putItem({
          TableName: cName,
          Item: doc
        }, callback);
      });
    };

    LiveDbDynamoDB.prototype.getOplogCollectionName = function(cName) {
      return "" + cName + "_ops";
    };

    LiveDbDynamoDB.prototype.writeOp = function(cName, docName, opData, callback) {
      var _this = this;
      return castOpToDoc(docName, opData, function(err, doc) {
        return _this.dynamodb.putItem({
          TableName: cName,
          Item: doc
        }, callback);
      });
    };

    LiveDbDynamoDB.prototype.getVersion = function(cName, docName, callback) {
      return this.dynamodb.query({
        TableName: cName,
        Select: 'SPECIFIC_ATTRIBUTES',
        AttributesToGet: ['v'],
        Limit: 1,
        ConsistentRead: true,
        KeyConditions: {
          id: {
            AttributeValueList: [
              {
                S: docName
              }
            ],
            ComparisonOperator: 'EQ'
          }
        },
        ScanIndexForward: false
      }, function(err, data) {
        if (err || !data) {
          return callback(err, 0);
        }
        return callback(err, (docVal(_.first(data.Items), "v") || -1) + 1);
      });
    };

    LiveDbDynamoDB.prototype.getOps = function(cName, docName, start, end, callback) {
      var keyConditions;
      keyConditions = {
        id: {
          AttributeValueList: [
            {
              S: docName
            }
          ],
          ComparisonOperator: 'EQ'
        }
      };
      if (end) {
        keyConditions.v = {
          AttributeValueList: [
            {
              N: start
            }, {
              N: end - 1
            }
          ],
          ComparisonOperator: 'BETWEEN'
        };
      } else {
        keyConditions.v = {
          AttributeValueList: [
            {
              N: start
            }
          ],
          ComparisonOperator: 'GE'
        };
      }
      return this.dynamodb.query({
        TableName: cName,
        Select: 'ALL_ATTRIBUTES',
        ConsistentRead: true,
        KeyConditions: keyConditions,
        ScanIndexForward: true
      }, function(err, data) {
        if (err || !data) {
          return callback(err, []);
        }
        return async.map(data.Items, castDocToOp, callback);
      });
    };

    return LiveDbDynamoDB;

  })();

  castOpToDoc = function(docName, opData, cb) {
    var opId, opV;
    opData = _.clone(opData);
    opId = "" + docName + " v" + opData.v;
    opV = opData.v;
    return encodeValue(opData.data, function(err, encodedData) {
      if (err) {
        return cb(err);
      }
      return cb(err, {
        id: {
          S: opId
        },
        doc_id: {
          S: docName
        },
        v: {
          N: opV
        },
        data: {
          B: encodedData
        }
      });
    });
  };

  castDocToOp = function(doc, cb) {
    if (!doc) {
      return;
    }
    return decodeValue(docVal(doc, "data"), cb);
  };

  castSnapshotToDoc = function(docName, data, cb) {
    return encodeValue(data.data, function(err, encodedData) {
      return encodeValue(data.m, function(err, encodedM) {
        if (err) {
          return cb(err);
        }
        return cb(err, {
          id: {
            S: docName
          },
          type: {
            N: (data.type || "").toString()
          },
          v: {
            N: data.v.toString()
          },
          m: {
            B: encodedM
          },
          data: {
            B: encodedData
          }
        });
      });
    });
  };

  castDocToSnapshot = function(doc, cb) {
    if (!doc) {
      return;
    }
    return decodeValue(docVal(doc, "data"), function(err, data) {
      return decodeValue(docVal(doc, "m"), function(err, m) {
        if (err) {
          return cb(err);
        }
        return cb(err, {
          docName: docVal(doc, "id"),
          data: data,
          type: docVal(doc, "type"),
          v: docVal(doc, "v"),
          m: m
        });
      });
    });
  };

  decodeValue = function(v, cb) {
    return zlib.inflate(new Buffer(v, 'base64'), function(err, inflated) {
      if (err) {
        return cb(err, null);
      } else {
        return cb(null, bson.deserialize(inflated));
      }
    });
  };

  encodeValue = function(v, cb) {
    return zlib.deflate(bson.serialize(v, true, true), function(err, deflated) {
      if (err) {
        return cb(err, null);
      } else {
        return cb(null, deflated.toString('base64'));
      }
    });
  };

  docVal(doc, attr)(function() {
    var attribute, type, value;
    attribute = doc[attr];
    type = _.first(_.keys(attribute));
    value = attribute[type];
    if (type !== 'N') {
      return value;
    }
    if (value === "") {
      return null;
    } else {
      return _.parseInt(value);
    }
  });

}).call(this);
